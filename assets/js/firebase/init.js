import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { getFirestore } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';
import { getAuth, signInWithEmailAndPassword } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';

// Fun√ß√£o para obter credenciais (lendo de vari√°veis de ambiente)
async function getFirebaseCredentials() {
    // Sempre tentar ler credenciais das vari√°veis de ambiente primeiro (GitHub Pages)
    const email = window.FIREBASE_AUTH_EMAIL || process.env.FIREBASE_AUTH_EMAIL;
    const password = window.FIREBASE_AUTH_PASSWORD || process.env.FIREBASE_AUTH_PASSWORD;
    
    if (email && password) {
        console.log('‚úÖ Credenciais carregadas das vari√°veis de ambiente');
        return { email, password };
    }
    
    // Fallback: tentar servidor local apenas se n√£o conseguir ler das vari√°veis de ambiente
    try {
        const response = await fetch('/api/firebase-auth');
        if (response.ok) {
            const credentials = await response.json();
            console.log('üîê Credenciais carregadas do servidor local (fallback)');
            return credentials;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Servidor local n√£o dispon√≠vel');
    }
    
    // Sem fallback - deve falhar se n√£o conseguir carregar
    console.error('‚ùå Credenciais Firebase n√£o encontradas');
    throw new Error('FIREBASE_AUTH_EMAIL e FIREBASE_AUTH_PASSWORD devem estar configuradas');
}

export async function loadFirebaseConfig() {
    const version = (typeof window !== 'undefined' && window.VERSION) ? `?v=${window.VERSION}` : '';
    
    // Carregar configura√ß√£o do GitHub Pages
    try {
        const resp = await fetch(`./firebase-config.public.js${version}`);
        if (resp.ok) {
            const script = await resp.text();
            eval(script);
            
            // Verificar se os valores s√£o placeholders
            if (window.FIREBASE_API_KEY === "PLACEHOLDER_API_KEY" || 
                window.FIREBASE_AUTH_DOMAIN === "PLACEHOLDER_AUTH_DOMAIN") {
                console.error('‚ùå ERRO: Configura√ß√£o Firebase n√£o foi gerada pelo GitHub Actions');
                console.error('‚ùå Configure os secrets no GitHub e fa√ßa push para a branch main');
                throw new Error('Firebase configuration not generated by GitHub Actions');
            }
            
            if (window.FIREBASE_API_KEY && window.FIREBASE_PROJECT_ID) {
                return {
                    apiKey: window.FIREBASE_API_KEY,
                    authDomain: window.FIREBASE_AUTH_DOMAIN,
                    projectId: window.FIREBASE_PROJECT_ID,
                    storageBucket: window.FIREBASE_STORAGE_BUCKET,
                    messagingSenderId: window.FIREBASE_MESSAGING_SENDER_ID,
                    appId: window.FIREBASE_APP_ID
                };
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar configura√ß√£o Firebase:', error);
        throw error;
    }
    
    // N√£o h√° fallback - deve falhar se n√£o conseguir carregar
    throw new Error('Failed to load Firebase configuration');
}

// Singleton para evitar m√∫ltiplas inicializa√ß√µes
let firebaseInstance = null;
let initPromise = null;

export async function initFirebase() {
    // Se j√° foi inicializado, retornar a inst√¢ncia existente
    if (firebaseInstance) {
        // console.log('üîÑ Firebase j√° inicializado, reutilizando inst√¢ncia');
        return firebaseInstance;
    }
    
    // Se j√° est√° sendo inicializado, aguardar a promessa existente
    if (initPromise) {
        // console.log('‚è≥ Firebase j√° est√° sendo inicializado, aguardando...');
        return await initPromise;
    }
    
    // Inicializar Firebase pela primeira vez
    console.log('üöÄ Inicializando Firebase pela primeira vez...');
    initPromise = _initFirebase();
    
    try {
        firebaseInstance = await initPromise;
        return firebaseInstance;
    } finally {
        initPromise = null;
    }
}

async function _initFirebase() {
    const config = await loadFirebaseConfig();
    const app = initializeApp(config);
    const db = getFirestore(app);
    const auth = getAuth(app);

    try {
        // Obter credenciais do servidor local
        const credentials = await getFirebaseCredentials();
        
        // Tenta fazer login com o usu√°rio da aplica√ß√£o
        // console.log('üîê Tentando autenticar usu√°rio da aplica√ß√£o...');
        await signInWithEmailAndPassword(auth, credentials.email, credentials.password);
        console.log('‚úÖ Login do usu√°rio da aplica√ß√£o no Firebase bem-sucedido!');
    } catch (error) {
        console.error('‚ùå Erro ao fazer login do usu√°rio da aplica√ß√£o no Firebase:', error.message);
        console.warn('‚ö†Ô∏è Opera√ß√µes de escrita no Firestore podem falhar sem autentica√ß√£o');
    }

    return { app, db, auth };
}


